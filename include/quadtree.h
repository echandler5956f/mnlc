#ifndef DSTARLITE_QT_H
#define DSTARLITE_QT_H

#include <vector>
#include <cmath>
#include <limits.h>
#include <ankerl/unordered_dense.h>
#include <stdio.h>

using namespace std;

namespace DStarLite
{
  class Quadtree
  {
  public:
    class BaseNode
    {
    public:
      BaseNode(uint32_t ID_, uint8_t metadata_, uint8_t lvlDiff_, int8_t occ_);

      ~BaseNode();

      uint32_t _ID;

      uint8_t _metadata;

      uint8_t _lvlDiff;

      uint8_t _occAgg;

    };

    static const uint32_t LOWERMASK;

    static const uint8_t PREVSTATEMASK;

    static const uint32_t X_MASK;

    static const uint32_t Y_MASK;

    static const uint8_t PRODUCTION_RULE[16];

    static const uint8_t INDEX_IN_PARENT_TO_GEO[4][4];

    static const uint8_t STENCIL_NUM[5];

    Quadtree(uint16_t sampleWidth_, uint8_t minLeafDepth_, uint8_t maxLeafDepth_, uint8_t unknownReplacement_, uint16_t maxVariance_);

    ~Quadtree();

    bool buildNodes(const vector<int8_t, allocator<int8_t>> &data_);

    bool updateNodes(const vector<int8_t, allocator<int8_t>> &data_);

    // vector<int> randomn = {72, 40, 90, 54, 74, 21, 60, 31, 59, 95, 71, 72, 33, 44, 50, 85, 13, 24, 71, 44, 30, 22, 50, 33, 99, 17, 67, 13, 11, 67, 15, 75,
    //                        14, 59, 54, 73, 12, 10, 16, 12, 26, 11, 15, 28, 61, 34, 70, 79, 46, 64, 18, 89, 69, 50, 68, 75, 42, 32, 10, 48, 89, 63, 40, 40,
    //                        26, 51, 79, 89, 61, 23, 16, 73, 67, 20, 13, 96, 42, 23, 87, 98, 32, 94, 88, 32, 60, 61, 25, 20, 66, 50, 19, 58, 81, 39, 83, 34,
    //                        14, 68, 15, 14, 14, 58, 25, 10, 96, 11, 35, 74, 12, 66, 54, 20, 53, 19, 94, 91, 36, 81, 57, 77, 45, 67, 19, 95, 39, 99, 43, 25,
    //                        89, 56, 33, 18, 48, 55, 95, 64, 58, 29, 16, 25, 55, 38, 14, 45, 89, 90, 18, 90, 66, 47, 67, 82, 10, 73, 43, 28, 70, 21, 97, 69,
    //                        85, 83, 68, 68, 52, 44, 82, 46, 53, 11, 91, 49, 84, 96, 38, 54, 35, 59, 86, 45, 74, 57, 11, 77, 59, 99, 31, 20, 36, 76, 64, 58,
    //                        20, 18, 22, 78, 12, 37, 73, 32, 81, 67, 86, 66, 33, 54, 67, 33, 63, 48, 91, 66, 35, 93, 52, 40, 55, 93, 41, 68, 93, 24, 40, 84,
    //                        46, 51, 67, 98, 15, 10, 97, 68, 18, 56, 45, 93, 14, 76, 80, 13, 12, 23, 11, 61, 47, 90, 89, 62, 32, 18, 32, 19, 35, 49, 93, 34,
    //                        20, 63, 44, 21, 93, 83, 99, 38, 89, 32, 25, 57, 32, 11, 36, 97, 23, 32, 57, 90, 42, 59, 20, 52, 14, 95, 44, 98, 25, 84, 90, 25,
    //                        61, 26, 78, 42, 58, 67, 98, 19, 10, 27, 48, 66, 69, 64, 54, 75, 85, 50, 68, 29, 80, 91, 49, 17, 85, 24, 47, 32, 77, 42, 86, 48,
    //                        95, 65, 68, 70, 43, 50, 23, 58, 56, 18, 47, 71, 39, 61, 83, 23, 27, 57, 44, 10, 22, 14, 69, 84, 14, 97, 67, 64, 52, 16, 33, 52,
    //                        33, 14, 44, 43, 42, 31, 96, 24, 71, 43, 75, 93, 69, 82, 63, 23, 84, 41, 68, 89, 91, 82, 36, 71, 38, 63, 80, 83, 68, 60, 35, 80,
    //                        99, 61, 37, 87, 23, 82, 57, 89, 60, 10, 46, 23, 11, 68, 58, 73, 40, 79, 78, 31, 36, 40, 95, 34, 80, 31, 34, 84, 96, 34, 80, 21,
    //                        41, 85, 40, 36, 23, 84, 16, 69, 53, 64, 95, 46, 74, 89, 39, 44, 70, 89, 61, 32, 54, 30, 72, 97, 97, 16, 85, 54, 38, 21, 73, 14,
    //                        28, 54, 92, 22, 41, 86, 38, 86, 38, 53, 92, 38, 45, 91, 47, 16, 14, 76, 66, 67, 80, 84, 28, 26, 62, 37, 76, 78, 16, 72, 54, 66,
    //                        69, 49, 51, 70, 40, 52, 90, 78, 64, 37, 95, 72, 13, 23, 81, 46, 76, 46, 35, 37, 70, 41, 59, 36, 80, 83, 84, 92, 81, 53, 97, 12,
    //                        97, 23, 49, 28, 80, 97, 85, 82, 92, 77, 41, 90, 46, 27, 40, 22, 54, 64, 85, 84, 23, 24, 89, 47, 75, 16, 26, 91, 42, 26, 52, 22,
    //                        66, 12, 50, 88, 53, 85, 10, 66, 71, 85, 36, 54, 74, 81, 51, 81, 94, 67, 48, 89, 72, 12, 60, 31, 68, 41, 15, 29, 62, 19, 99, 72,
    //                        15, 78, 95, 77, 51, 17, 67, 73, 95, 33, 89, 82, 92, 15, 43, 93, 36, 21, 66, 95, 21, 95, 77, 27, 69, 21, 64, 59, 26, 28, 54, 56,
    //                        43, 81, 29, 47, 21, 31, 82, 71, 18, 56, 28, 39, 98, 45, 71, 10, 43, 54, 85, 45, 95, 71, 90, 73, 94, 24, 73, 80, 16, 22, 55, 58,
    //                        24, 36, 89, 10, 89, 83, 32, 38, 55, 50, 21, 59, 98, 36, 61, 68, 20, 37, 34, 82, 89, 87, 85, 26, 58, 15, 20, 27, 23, 39, 79, 82,
    //                        30, 20, 11, 23, 70, 46, 15, 57, 19, 40, 56, 44, 90, 76, 68, 71, 96, 62, 46, 24, 56, 94, 21, 57, 45, 73, 18, 77, 84, 95, 44, 81,
    //                        14, 43, 40, 34, 85, 51, 33, 88, 59, 85, 91, 90, 87, 19, 54, 32, 48, 94, 59, 66, 71, 71, 27, 36, 70, 17, 63, 52, 37, 57, 50, 55,
    //                        91, 84, 78, 88, 69, 95, 19, 14, 71, 98, 46, 70, 82, 81, 45, 85, 17, 48, 49, 72, 97, 92, 23, 51, 49, 65, 83, 62, 44, 32, 21, 34,
    //                        81, 85, 40, 64, 98, 96, 53, 55, 23, 66, 29, 84, 59, 80, 52, 36, 74, 12, 18, 17, 21, 33, 12, 93, 21, 25, 83, 33, 68, 49, 78, 20,
    //                        43, 69, 65, 38, 98, 78, 47, 48, 79, 26, 17, 19, 47, 57, 15, 12, 55, 93, 76, 57, 77, 89, 10, 29, 49, 68, 18, 17, 83, 70, 60, 89,
    //                        84, 96, 50, 35, 32, 61, 44, 91, 45, 21, 93, 35, 21, 32, 46, 18, 39, 93, 12, 89, 84, 92, 63, 10, 59, 54, 75, 36, 78, 59, 68, 97,
    //                        77, 94, 10, 49, 66, 92, 89, 66, 90, 62, 64, 79, 68, 16, 97, 81, 77, 42, 48, 33, 80, 37, 64, 91, 45, 35, 91, 92, 43, 64, 81, 94,
    //                        65, 20, 63, 91, 75, 54, 47, 98, 37, 39, 43, 29, 87, 66, 80, 74, 85, 33, 13, 31, 27, 16, 92, 71, 45, 84, 50, 52, 27, 87, 29, 67,
    //                        45, 68, 64, 93, 54, 24, 35, 62, 15, 34, 69, 13, 34, 12, 75, 80, 32, 80, 97, 85, 48, 79, 76, 56, 77, 83, 16, 34, 68, 44, 87, 18,
    //                        42, 53, 68, 55, 86, 39, 14, 85, 29, 59, 81, 49, 85, 15, 78, 66, 58, 56, 57, 54, 11, 17, 37, 56, 57, 94, 31, 78, 10, 77, 91, 16,
    //                        17, 15, 40, 66, 27, 36, 29, 52, 17, 26, 40, 94, 16, 21, 78, 84, 49, 60, 91, 23, 39, 75, 54, 19, 54, 10, 75, 79, 35, 24, 36, 26};

  private:
    uint16_t _sampleWidth;

    uint8_t _sampleDepth;

    uint8_t _minLeafDepth;

    uint8_t _maxLeafDepth;

    uint8_t _unknownReplacement;

    uint16_t _maxVariance;

    uint8_t _lowestBitTable[256];

    uint8_t _stencilChildTable[4][15] = {{0x01u, 0x08u, 0x02u, 0x04u,
                                          0x09u, 0x0Cu, 0x06u, 0x03u,
                                          0x00u,
                                          0x05u, 0x0Au,
                                          0x0Eu, 0x07u, 0x0Du, 0x0Bu},

                                         {0x01u, 0x02u, 0x08u, 0x04u,
                                          0x03u, 0x0Cu, 0x06u, 0x09u,
                                          0x00u,
                                          0x05u, 0x0Au,
                                          0x0Eu, 0x0Du, 0x07u, 0x0Bu},

                                         {0x04u, 0x08u, 0x02u, 0x01u,
                                          0x0Cu, 0x09u, 0x03u, 0x06u,
                                          0x00u,
                                          0x05u, 0x0Au,
                                          0x0Bu, 0x07u, 0x0Du, 0x0Eu},

                                         {0x04u, 0x02u, 0x08u, 0x01u,
                                          0x06u, 0x03u, 0x09u, 0x0Cu,
                                          0x00u,
                                          0x05u, 0x0Au,
                                          0x0Bu, 0x0Du, 0x07u, 0x0Eu}};

    typedef ankerl::unordered_dense::map<uint32_t,
                                         BaseNode,
                                         ankerl::unordered_dense::hash<uint32_t>,
                                         std::equal_to<uint32_t>,
                                         std::allocator<std::pair<uint32_t, BaseNode>>,
                                         ankerl::unordered_dense::bucket_type::standard>
        NH;

    NH _leafHash;

    NH _leafParentHash;

    void _buildLowestBitTable();

    static uint32_t _constructID(uint8_t depth, uint32_t length);

    bool _emplaceNode(uint32_t id, uint8_t metadata, uint8_t lvlDiff, uint8_t occ);

    uint8_t _extractDepthFromID(uint32_t id, uint8_t firstBit = 0xFFU);

    uint32_t _extractLengthFromID(uint32_t id, uint8_t firstBit = 0xFFu);

    uint8_t _findFirstBits(uint32_t value);

    void _findNeighbors(uint32_t id, uint8_t depth = 0xFFFFu, uint32_t length = 0xFFFFFFFFu);

    static uint32_t _getNumTiles(uint8_t depth);

    static uint32_t _getLevelBitOffset(uint8_t depth);

    static uint8_t _getLowestSetBit(uint8_t value);

    static uint8_t _getState(uint8_t depth, uint32_t length, uint8_t prevState);

    uint32_t _hilbertCoordsToRowMajor(uint32_t pos, uint32_t offset1 = 0, uint32_t offset2 = 0);

    uint32_t _unhilbert(uint8_t depth, uint32_t length);

    uint32_t _unhilbertDeinterleave(uint32_t l);

    void _rebalanceTree();

    inline uint32_t lg32(uint32_t x)
    {
      return 31U - (uint32_t)__builtin_clz(x);
    }
  };

};

#endif // DSTARLITE_QT_H



// table_index_type Hilbert2DAlgorithms::o2Table[16][4][4][4] = {
// // [index of v inside its grandparent][state of grandparent][grandparent's neighbor's state in facet direction][desired facet aka direction]
// /*gpNState*/     /*H                 A                 B                 R             */
// /*facets*/       /*D,  U,  L,  R     D,  U,  L,  R     D,  U,  L,  R     D,  U,  L,  R */
// /*00*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}},
     
// /*01*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}},
     
// /*02*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},,
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}},
     
// /*03*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},,
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}},
    
    
    
    
// /*04*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}},
     
// /*05*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}},
     
// /*06*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},,
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}},
     
// /*07*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},,
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}},
     
     
     
     
// /*08*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}},
 
// /*09*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}},
     
// /*10*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}},
     
// /*11*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}},
     
     
     
     
// /*12*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}},
     
// /*13*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}},
     
// /*14*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}},
     
// /*15*//*H*/     {{{-1, -1, 09, 09}, {09, -1, -1, 09}, {09, -1, 09, -1}, {09, 09, 09, 09}},
//       /*A*/      {{-1, 09, 09, -1}, {09, 09, -1, -1}, {09, 09, 09, 09}, {09, -1, 09, -1}},
//       /*B*/      {{-1, 09, -1, 09}, {09, 09, 09, 09}, {09, 09, -1, -1}, {09, -1, -1, 09}},
//       /*R*/      {{09, 09, 09, 09}, {-1, 09, -1, 09}, {-1, 09, 09, -1}, {-1, -1, 09, 09}}}}; // find the index of the neighbor w.r.t the grandparent's neighbor